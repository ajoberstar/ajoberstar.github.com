<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by Site-Server v6.0.0-9457-9457 (http://www.squarespace.com) on Sat, 19 Nov 2016 23:32:14 GMT
--><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://www.rssboard.org/media-rss" version="2.0"><channel><title>Andrew Oberstar</title><link>http://www.andrewoberstar.com/</link><lastBuildDate>Fri, 07 Nov 2014 04:06:06 +0000</lastBuildDate><language>en-US</language><generator>Site-Server v6.0.0-9457-9457 (http://www.squarespace.com)</generator><description></description><item><title>Drinking the Clojure Kool-Aid</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Fri, 07 Nov 2014 04:06:05 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2014/11/6/drinking-the-clojure-kool-aid</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:545c375ce4b06e0eec9c1701</guid><description><![CDATA[<p>As with <a href="http://www.andrewoberstar.com/blog/2012/3/13/7-languages-scala.html">Scala</a>, my first <a href="http://www.andrewoberstar.com/blog/2012/3/18/7-languages-clojure.html">experience with Clojure</a> was the <a href="https://pragprog.com/book/btlang/seven-languages-in-seven-weeks">7 Languages in 7 Weeks</a> book. That merely gave me a flavor of Clojure's syntax, but didn't lead me to the deep philosophical underpinnings behind Clojure. More recently, I've been watching a lot of Clojure talks and have found Rich Hickey (creator of <a href="http://clojure.org">Clojure</a> to be a very inspiring speaker. His <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy</a> talk is easily my favorite, where he lays out a clear distinction between the concepts of simple (as opposed to complex) and easy (as opposed to hard) and how certain programming constructs contain an inherent complexity. That talk also popularized the term <strong>complect</strong> (to intertwine or braid) within the Clojure community as a way of emphasizing the precise type of complexity that Clojure intends to avoid.</p>

<p>As I've read mailing list threads and blog posts and watched more talks by others in the Clojure community, it's clear that the philosophy behind Clojure has a profound resonance with them. It can sometimes seem like they all part of a cult led by Rich Hickey, however, I completely buy into it.</p>

<p>Here are some of the core tenets that I really appreciate, along with some of the corresponding Clojure features:</p>

<ul>
<li>Immutability should be the default. (persistent data structures)</li>
<li>Mutability constructs should be safe. (refs, agents, atoms)</li>
<li>Polymorphism can be done without inheritance. (protocols, multimethods)</li>
</ul>

<p>While some of these are concepts that are often espoused by "good" programmers in many languages, Clojure goes to a great deal of effort to make these "simple" concepts "easy".</p>]]></description></item><item><title>Quick Gradle Tip: Setting Bintray Attributes for Gradle Plugins</title><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sun, 28 Sep 2014 23:41:41 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2014/9/28/quick-gradle-tip-setting-bintray-attributes-for-gradle-plugins</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:54289a90e4b0b8d209dc07e3</guid><description><![CDATA[<p>As part of the new <a href="http://plugins.gradle.org">Gradle plugin portal</a>, you need to set some attributes on the version of your plugin package in Bintray.</p>

<p>The <a href="https://github.com/bintray/gradle-bintray-plugin">Bintray Gradle plugin</a> lets you set attributes, so you can add the following snippet into your project to include all of your plugin IDs in the attributes.</p>

<p>Since Gradle requires you to put a properties file in your JAR for each plugin, you can get derive your whole attribute value from the project's group, name, and the names of the properties files within META-INF.</p>

<pre><code>def pluginIds = project.fileTree(
    dir: 'src/main/resources/META-INF/gradle-plugins',
    include: '*.properties').collect { file -&gt; file.name[0..(file.name.lastIndexOf('.') - 1)] }

bintray {
    // ...
    pkg {
        // ...
        version {
            // ...
            attributes = ['gradle-plugin': pluginIds.collect { pluginId -&gt;
                "${pluginId}:${project.group}:${project.name}" }] 
        }
    }
}
</code></pre>]]></description></item><item><title>Gradle Test Organization</title><dc:creator>Andrew Oberstar</dc:creator><pubDate>Fri, 23 Aug 2013 11:50:24 +0000</pubDate><link>http://blog.safaribooksonline.com/2013/08/22/gradle-test-organization/</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:52174c90e4b0599c5a8332cd</guid><description><![CDATA[<p>Guest post for Safari Books Online.</p><p><a href="http://www.andrewoberstar.com/blog/2013/8/23/gradle-task-ordering">Permalink</a><p>]]></description></item><item><title>Gradle Task Ordering</title><dc:creator>Andrew Oberstar</dc:creator><pubDate>Tue, 20 Aug 2013 00:46:10 +0000</pubDate><link>http://blog.safaribooksonline.com/2013/08/16/gradle-task-ordering/</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5212bc5ee4b0a807b654f6f6</guid><description><![CDATA[<p>Guest post for Safari Books Online.</p><p><a href="http://www.andrewoberstar.com/blog/2013/8/19/gradle-task-ordering">Permalink</a><p>]]></description></item><item><title>Using Gradle Init Scripts for a Developer-Specific Configuration</title><dc:creator>Andrew Oberstar</dc:creator><pubDate>Wed, 24 Jul 2013 22:14:49 +0000</pubDate><link>http://blog.safaribooksonline.com/2013/07/24/using-gradle-init-scripts-for-developer-specific-configuration/</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:51f051a8e4b01176c771f25b</guid><description><![CDATA[<p>Guest post for Safari Books Online.</p><p><a href="http://www.andrewoberstar.com/blog/2013/7/24/using-gradle-init-scripts-for-a-developer-specific-configuration">Permalink</a><p>]]></description></item><item><title>Raspberry Pi as Server: DNS and DHCP</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Mon, 31 Dec 2012 02:31:33 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/12/30/raspberry-pi-as-server-dns-and-dhcp</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:50e0e196e4b03955129f68f6</guid><description><![CDATA[<p>In my <a href="http://www.andrewoberstar.com/blog/2012/12/30/raspberry-pi-as-ldap-and-dns-introduction">previous post</a>, I mentioned I'm trying to set up my <a href="http://www.raspberrypi.org/">Raspberry Pi</a> as an LDAP and DNS server.</p>

<p>Once I got Raspbian installed, I started to look into setting up the DNS server, the end goal is to have domain names for all devices on my internal network (e.g. instead of <code>192.168.0.5</code>, I can use <code>mydevice.lan.mydomain.com</code>). While, you can do this with platform specific hostname files (e.g. <code>/etc/hosts</code> or <code>C:\Windows\system32\drivers\drivers\etc\hosts</code>), it requires you to maintain that file on each device.</p>

<p>The final process I went through isn't Raspberry Pi specific, it should work on at least any Debian-based system.</p>

<p>I would also like to preface this by saying I am not a networking expert, so this post reflects my layman's understanding of what I ended up configuring</p>

<h1 id="dnssoftware">DNS Software</h1>

<p>I've looked into setting up internal DNS before and always ended up finding instructions for <a href="https://www.isc.org/software/bind">bind</a>. From what I can tell, bind is insanely powerful, but it's also crazy complicated. For the tiny use case I have, the configuration is too much overhead.</p>

<p>I ended up finding references to <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a>, which is purpose built for small networks. Here's a rundown of the basic functionality I ended up using:</p>

<ul>
<li><strong>DNS forwarding and cache</strong> -  You still use your existing DNS (be it your ISP's DNS, Google public DNS, or OpenDNS) for accessing the Internet. In theory, the caching it provides could increase performance, though I don't have any expectations about that.</li>
<li><strong>DNS for static IPs</strong> - Define domain names for devices with static IPs on your network.</li>
<li><strong>DHCP</strong> - General DHCP provider.</li>
<li><strong>DNS for DHCP clients</strong> - For any client that leases an IP from dnsmasq, it will also provide a domain name to that IP. Essentially your own internal dynamic DNS.</li>
</ul>

<p>I wasn't interested in moving DHCP from my router to the Pi, until I found out that my router (<a href="http://www.asus.com/Networks/Wireless_Routers/RTN66U/">Asus RT-N66U</a>) also uses dnsmasq for DHCP. I was able to telnet onto the router to see the config, but I noticed a few options I wanted to set were not turned on and there wasn't a way to configure them from the web UI. While I could modify the config file manually, it is overwritten at restart by the stock firmware. So back to installing on the Pi.</p>

<h1 id="pickinginternaldomainnames">Picking Internal Domain Names</h1>

<p>I started out planning to pick some TLD not used by ICANN (e.g. <code>.local</code> or <code>.home</code>) for my internal domains. Most posts I read on this subject recommended against that in case ICANN decided to use it in the future. Honestly, I don't expect that to be an issue, but I followed their advice anyway.</p>

<p>The recommendation was to stick with a domain you already own and designate a subdomain for all of your internal hosts to be assigned under. For example, if you own <code>mydomain.com</code>, you could designate <code>lan.mydomain.com</code> to be the root for all of your internal domains. A device might then be assigned <code>mydevice.lan.mydomain.com</code>. Gets a little wordy, but at least the namespace is safe.</p>

<h1 id="installation">Installation</h1>

<p>Through the magic of Debian, installing dnsmasq is as simple as:</p>

<pre><code>sudo apt-get install dnsmasq
</code></pre>

<h1 id="configuration">Configuration</h1>

<p>For my setup, dnsmasq configuration happens in the following files:
* <code>/etc/dnsmasq.conf</code> - dnsmasq specific configuration
* <code>/etc/resolv.conf</code> - DNS to forward to (and the one used by the server running dnsmasq)
* <code>/etc/hosts</code> - host names for static IPs
* <code>/etc/ethers</code> - manually assigned IPs specified as MAC to IP mappings (optional)</p>

<h2 id="etcdnsmasqconf">/etc/dnsmasq.conf</h2>

<p>This configures how the DNS server and the DHCP provider (if enabled) should behave. I'll discuss the main options I used, but the example configuration file provided with the install has good documentation.</p>

<p>Some domain lookups are essentially guaranteed to come up empty on the wider Internet. You can disable forwarding of them with the following lines:</p>

<pre><code># won't forward unqualified names (e.g. myserver)
domain-needed

# won't forward some non-routed addresses
bogus-priv

# won't forward requests for your intranet subdomain
local=/lan.mydomain.com/
</code></pre>

<p>That last one is key. It forces that subdomain to be resolved only via internal config: the hosts file or DHCP clients.</p>

<p>To specify the root subdomain for your intranet, use the following two options:</p>

<pre><code># append the domain (below) to all hosts in the hosts file
expand-hosts

# appended to DHCP hosts and, if above option specified, to hosts from static IPs
domain=lan.mydomain.com
</code></pre>

<p>If you want to use the <code>/etc/ethers</code> file (see section farther down) add this option:</p>

<pre><code>read-ethers
</code></pre>

<p>The rest is DHCP config. I copied it from my router's dnsmasq config, so I don't know much about all of the options.</p>

<p><strong>NOTE:</strong> If you do enable DNS via dnsmasq, you should shut off the DHCP on your router. After an IP refresh, your DHCP clients should all work fine.</p>

<h2 id="etcresolvconf">/etc/resolv.conf</h2>

<p>In my network, this points to my router. I would expect that is the normal setup, but your mileage may vary. The file's only contents are the IP of the DNS server to point to.</p>

<h2 id="etchosts">/etc/hosts</h2>

<p>You'll want to leave the existing contents, but add the host names for any of your devices using static IPs. You do not need every device listed in here, just the ones you want to be addressable via a domain name.</p>

<p>Format is <code>&lt;IP&gt; &lt;host name&gt;</code>, and the host name should only be the lowest level qualifier of the host (not the full domain name). For example, if you want a device to be <code>mydevice.lan.mydomain.com</code>, only specify <code>mydevice</code>.</p>

<pre><code>192.168.1.301 mynas
192.168.1.302 webserver
</code></pre>

<h2 id="etcethers">/etc/ethers</h2>

<p>This is only needed if you have a few devices you want to assign static IPs to, but can't or don't want to configure the static IP on the devices themselves.</p>

<p>This is simply a <code>&lt;MAC&gt; &lt;IP&gt;</code> formatted file, with one mapping per line, for example:</p>

<pre><code>00:00:00:00:00:00 192.168.0.200
00:00:00:00:00:01 192.168.0.201
</code></pre>

<h1 id="finalthoughts">Final Thoughts</h1>

<p>As neat as it is, the benefits of domain names internally are pretty minimal. I already had the handful of static IPs I use memorized, but it will be nice to have a friendlier name to use. I do like having domains for the DHCP clients, however, since it removes the need to look up the IP beforehand.</p>

<p>Next step will be setting up LDAP on the Pi.</p>]]></description></item><item><title>Raspberry Pi as LDAP and DNS: Introduction</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sun, 30 Dec 2012 18:48:27 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/12/30/raspberry-pi-as-ldap-and-dns-introduction</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:50e087fee4b0a05702aee752</guid><description><![CDATA[<p>For those of you unfamiliar, <a href="http://www.raspberrypi.org/">Raspberry Pi</a> is an inexpensive computer that can run Linux and is about the size of a credit card. I think it was primarily designed for educational purposes, to get kids into computers, though it works well for a lot of other use cases. When I got mine, I started off with <a href="http://www.raspbmc.com/">Raspbmc</a>, the XBMC install for the Pi. I had a few issues and decided to stick with my existing Boxee Box for now.</p>

<p>My next project is going to be setting it up as an LDAP server to provide single sign on for my other Linux boxes and maybe trying to connect my Windows boxes to it as well. I'm also thinking about setting up DNS to have intranet domains (e.g. thinking of a .home TLD). I don't know much about configuring either of those or what the implications will be, so this will be a learning process.</p>

<p>I'm starting off by reimaging the Pi with <a href="http://www.raspbian.org/">Raspbian</a> using the image provided by the <a href="http://www.raspberrypi.org/downloads">Pi Foundation</a> and these <a href="http://elinux.org/RPi_Easy_SD_Card_Setup#Copying_an_image_to_the_SD_card_in_Linux_.28command_line.29">Linux CLI instructions</a>.</p>

<p>The first part is <a href="http://www.andrewoberstar.com/blog/2012/12/30/raspberry-pi-as-server-dns-and-dhcp">DNS and DHCP config</a>.</p>]]></description></item><item><title>Gradle #x3E; Sliced Bread</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Fri, 21 Dec 2012 01:56:54 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/12/20/gradle-sliced-bread</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:50d3beaae4b097d6748a8a00</guid><description><![CDATA[<p>I'm not really convinced that sliced bread is that much of an improvement over uncut bread, but Gradle is definitely better. Considering how much I've been using <a href="http://gradle.org">Gradle</a> over the last 2 years, I'm surprised I haven't written anything about it yet.</p>

<p>Let's start with the basics. Gradle is a build automation tool, primarily supporting JVM languages (e.g. Java, Groovy, Scala). You may be familiar with Ant and Maven, the two previous behemoths in the Java build space, but for those who don't know:</p>

<ul>
<li><a href="http://ant.apache.org/">Ant</a> is an XML based tool. You write a build file listing out all of the tasks you want to run. Once you have a build file set up, it's pretty good. Unfortunately, you need to define every action it will take and wire all of the inputs and outputs together. Also, if you realize that all of your JAR build scripts look the same, you're not going to have a very easy time trying to reuse that logic.</li>
<li><a href="http://maven.apache.org/">Maven</a> took the opposite philosophy of Ant. Rather than being a toolkit that you could do with what you please, Maven is based on the idea that everything is essentially built the same. Your XML file, is no longer a true build script, defining your actions, but instead a descriptor explaining what your project is. Maven is entirely declarative and all projects are supposed to use the same convention. All great, until you need to stray from that convention or want one little bit of extra functionality.</li>
</ul>

<p>Gradle comes in with the benefit of seeing the success and failures of both Ant and Maven ending up with a philosophy of starting declarative, but giving you the option to easily throw in extra logic as needed.</p>

<p>I'm not going to bother with simple examples, since you can easily find beginner tutorials on Gradle's website and elsewhere. This post can at least serve as a high-level introduction to why you might want to look at Gradle and, hopefully, I will be posting some more on this topic in the future.</p>]]></description></item><item><title>Letter to Representatives - Fiscal Cliff</title><category>Politics</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sun, 02 Dec 2012 20:10:41 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/12/2/letter-to-representatives-fiscal-cliff</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:50bbb4e1e4b012760adfd293</guid><description><![CDATA[<p>I wanted to post the message I sent to my representatives (Representative McCollum, Senator Franken, and Senator Klobuchar) and urge everyone, regardless of your position, to contact your representatives to let your voice be heard on the significant issue of our national debt and the upcoming "fiscal cliff".</p>

<blockquote>
  <p>I am writing today about the problem of addressing our deficit situation and averting the “fiscal cliff”. I believe that the key to a solution is a long-term vision of a minimal debt and generally balanced budgets. I am a lifelong Minnesotan and traditionally vote Democrat, but I also consider myself fiscally conservative.</p>
  
  <p>I very much appreciate your statements of taking a balanced approach that includes both revenue increases and spending cuts. I consider the $1.3 trillion deficit and $359 billion interest payment on our debt in FY2012 to be a travesty. I believe very strongly that the only way to address this issue is to think big. This means holding nothing sacred in these negotiations and considering spending cuts to very expensive (and popular) benefits such as Social Security and Medicare. I am in favor of these safety nets, but their benefits need to be realistically balances with our financial ability to pay for them. However, what seems to be the biggest untouchable is the defense budget. We no longer fight (nor have any reasonable expectation of fighting) a traditional war, yet we spend over $1 trillion on defense. I’m not saying we have no enemies, but the enemies we do have require a vastly different (and I believe much less expensive) type of military.</p>
  
  <p>I also firmly agree with you that the rich should pay a larger portion of the tax burden, though I think a long-term solution is going to have to go beyond increasing tax rates. Having $1 trillion dollars in tax expenditures this year is absurd. While reducing or limiting deductions will help, it won’t get us all of the way, which is where raising rates comes in. However, it may help to compromise by considering a smaller raise than letting the Bush cuts expire would result in.</p>
  
  <p>I urge you to avoid short-term solutions by thinking big in your continued fight for a debt solution that goes beyond deficit reduction and to address debt reduction. I appreciate your work on this issue, and would be very interested to see more detail on your position.</p>
  
  <p>Sincerely,
  Andrew Oberstar</p>
</blockquote>]]></description></item><item><title>If This Then That</title><category>Random</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sat, 15 Sep 2012 01:26:49 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/9/14/if-this-then-that</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5053d959e4b0088c255e6f1f</guid><description><![CDATA[<p>I heard about <a href="http://ifttt.com">If This Then That</a> on <a href="http://twit.tv/tnt">Tech News Today</a> a couple weeks ago and just started playing around with it today.  It's basically a way for you to automate all kinds of tasks based on different web services (mostly social networks) that you use.  Some examples:</p>

<ul>
<li>Post all new blog posts (RSS entries) to Twitter.</li>
<li>Add all Last.fm scrobbles in new rows in a Google Drive spreadsheet.</li>
<li>Save any Youtube videos I mark as "watch later" to Pocket.</li>
<li>Email me if it's going to rain tomorrow.</li>
</ul>

<p>I like the idea and hope they can expand it to even more services.</p>]]></description></item><item><title>Adventures in Scala/Lift: Part 1</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sun, 01 Apr 2012 14:42:00 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/4/1/adventures-in-scalalift-part-1.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b595</guid><description><![CDATA[<p>After completing 7 Languages in 7 Weeks, I decided to start working on a project to get my feet wet in Scala. &nbsp;For the past couple weeks I've been reading through <a href="http://www.amazon.com/Programming-Scala-Comprehensive-Step-step/dp/0981531601" mce_href="http://www.amazon.com/Programming-Scala-Comprehensive-Step-step/dp/0981531601">Programming in Scala</a>, which is seemingly the definitive Scala book and is written by the language author.</p>
<p>I've really enjoyed a lot of Scala features so far:</p>
<ul>
<li>Type inference - &nbsp;One of the advantages to dynamic languages is that you don't have to specify types. &nbsp;Usually it's so obvious what type the value should be that it's just a waste of keystrokes to specify the type youself. &nbsp;Scala gives you the same benefit but with static types, so everything is still enforced by the compiler.<br>In Java:<br>
<pre>Map map = new HashMap(); //verbose...
</pre>
<br>In Groovy:<br>
<pre>def map = [:] //concise, but no type safety
</pre>
<br>In Scala:<br>
<pre>var map = Map[String, String]() //concise, with type safety
</pre>
</li>
<li>Traits - Traits are insanely flexible compared to being stuck with abstract classes and interfaces in Java. &nbsp;Being able to mix in an arbitrary number of traits to add new behavior is so much nicer than being forced into a hierarchical structure all of the time. &nbsp;One example I have found useful is a simple Logging trait to provide an instance value named "logger".<br>
<pre>trait Logging {
  private val logger = LoggerFactory.getLogger(getClass)
}

class LogActor extends Actor with Logging {
  def act() {
    loop {
      react {
        case msg =&gt; logger.info(msg)
      }
    }
  }
}
</pre>
</li>
<li>If structures that return values - Scala's if statement (and for expressions) can return values, which can reduce a little bit of boilerplate (and also replace the odd looking ternary operator from Java).<br>In Java:<br>
<pre>//the if statement
int testing1;
if (somethingBoolean) {
  testing1 = "Hey that was true!";
} else {
  testing1 = "Darn, that was false.";
}

//or the ternary
int testing2 = somethingBoolean ? "Hey that was true!" : "Darn, that was false.";
</pre>
<br>In Scala:<br>
<pre>//consistently use if structure for if-like things
val testing = if (somethingBoolean) "Hey, that was true!" else "Darn, that was false."

//even more useful with implicit return
def method() = {
  if (somethingBoolean) {
     //...
    testing
  } else {
    //...
    otherTesting
  }
}
</pre>
</li>
<li>For expressions - If I had learned about Scala after Erlang, I might have caught on to this at the time, but for expressions in Scala are very similar to list comprehensions in Erlang (I would even argue more powerful).<br>
<pre>val list = List(1, 2, 3, 4, 5, 6, 7, 8, 9)

for (x &lt;- list; x &lt;= 4) yield x * 2
//returns List(2, 4, 6, 8)
</pre>
</li>
<li>Implicit return value - In Scala you don't need to explicitly return anything. &nbsp;The final expression calculated is what is returned. &nbsp;It actually seems to be considered bad style to use the return keyword. &nbsp;Groovy has this same feature, and I never really liked it (except in closures). &nbsp;It seemed confusing that there wasn't a return statement. &nbsp;However, with a staticly typed language like Scala, I'm seeing the light. &nbsp;Having the compiler tell you you are returning the wrong type of variable is a lot nicer than not catching it until runtime.</li>
<li>Option type (i.e. Death to nulls!) - In Java, you have to worry about the dreaded NullPointerException (NPE) since null is the general approach to saying that a variable has no value. &nbsp;Since there's no way of telling whether a variable might be null or not, you should really be doing null checks all over the place. &nbsp;Yuck...<br><br>In Scala, however, the idiomatic approach is to use the Option[T] type. &nbsp;This says that the variable may or may not actually have a value. &nbsp;It's value will either by Some(value: T) or None. &nbsp;The Option class has a bunch of nice methods to help you deal with these results:<br><br>
<pre>def checkValues(map: Map[String, List[Int]]) {
  //calling get on a map returns an Option[V] (V being the type of the values in the map)
  val potato = map.get("potato")
  
  //can handle with pattern matching
  potato match {
    case Some(list) =&gt; list.map(_ * 2).foreach(println) //ooooo... type safety
    case None =&gt; println("potato was not set")
  }

  //can provide a default value
  potato getOrElse Nil //Nil is a shortcut for an empty list

  //can use collection operations or for expressions
  potato.map(_.map(_ * 2)) getOrElse Nil
}
</pre>
<br>Scala does stil have null for Java interoperability, but its use is highly discouraged. &nbsp;If you can still get NPEs, then what's the benefit, you ask? &nbsp;Using Option gives compile-time enforcement that the developer needs to be aware &nbsp;there might not be a value for this object. &nbsp;In Java, you have to rely on the developer reading the Javadoc and then remembering it when they go to use the method.</li>
</ul>
<p>There are other things I'm having trouble grasping:</p>
<ul>
<li>Immutability - I'm so used to the approach of encapsulating mutable state in an object, that it puzzles me to try to write a program without (or with significantly less) mutable state. &nbsp;Scala lets you use mutable state, but they do nudge you towards immutability. &nbsp;With mutable state you can pass the object to someone and know that no matter when they decide to use it, they'll have the up to date version. &nbsp;Granted if you passed it to another thread you have to be worried about concurrency issues. &nbsp;Using Actors to encapsulate some of the major mutable state has been my approach so far, which seems to be helping.</li>
<li>Import statements - Scala has much more powerful (shoot yourself in the foot powerful) import statements. &nbsp;There are a bunch of different flavors:<br>
<pre>//normal import one type import
import java.net.URI //OK, makes sense

//everything in the package
import actors._  //considered bad form in Java, but OK

//import a few specific types
import xml.{Node, NodeSeq} //hmm, interesting...

//rename types
import collections.mutable.{Map =&gt; MutableMap} //whoa

//relative imports
import java._  //ok, why?
import io.File  // stop it
import util._   //really, this is just crazy

//absolute imports, if you're scared
import _root._.java.net.URL
</pre>
<br>The concepts behind these imports aren't confusing and the syntax is straightforward. &nbsp;My problem is that in Java wildcard imports (import java.util.*) are considered evil because you aren't completely sure which types you are using from which packages. &nbsp;It makes it a lot harder for someone new to your code to come in and understand what each of the types you use correspond to.<br><br>General practice in Scala is to use the wildcard and relative imports. &nbsp;Obviously you need to be careful with this because importing everything willy-nilly is just going to cause issues. &nbsp;There are benefits to this for importing type aliases, case classes, and implicit functions, but it's a big change.</li>
<li>IDE support - I'm an Eclipse guy. &nbsp;While Scala does have an Eclipse plugin, it's a little lacking. &nbsp;I understand that it's a newer language and it's going to take a while for it to catch up but there are some annoyances:  
<ul>
<li>&nbsp;Compiler errors don't display if you hover of the snippet underlined in red. &nbsp;You need to go to the side of screen and hover over the red X. &nbsp;Time drains away, seconds at a time.</li>
<li>Compiler errors are sometimes wrong or missing. &nbsp;Some compiler errors won't go away but work just fine when I compile with scalac. &nbsp;There are also things that don't fail in Eclipse that do in scalac. &nbsp;However, all in all, something is better than nothing, and considering how slow Scala compilation is, something is a good start.</li>
<li>Side note: One huge benefit of the IDE is that hovering over a method/variable/expression will tell you what it's qualified type is. &nbsp;That's a huge benefit with relative imports.</li></ul></li></ul>
<p>Well, that's enough for one sitting. &nbsp;I just started playing with Lift a couple days ago, so next post will probably about that.</p>
<p>As a final note: Get Up With It by Miles Davis. &nbsp;The End.</p>]]></description></item><item><title>6.5 Languages in 12 Days</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Tue, 20 Mar 2012 22:02:36 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/20/65-languages-in-12-days.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b593</guid><description><![CDATA[<p>I'm all done with the <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">7 Languages in 7 Weeks</a> book. &nbsp;Overall, I was very happy with it and recommend it to anyone looking to broaden their programming horizons.</p>
<p>This book had a very different style from other programming books I've read. &nbsp;Rather than explain everything I needed to understand the language (and the exercises), the author cut narrow but deep slices through the language to pick out some interesting concepts. &nbsp;With a book trying to show me 7 programming languages, there's nowhere near enough room to explain everything. &nbsp;The big benefit of that is I got to do some non-trivial examples very quickly. &nbsp;But since I didn't have a firm foundation in each language, I very easily tripped myself up.</p>
<p>The concept is supposed ot be that you spend a week on each language. &nbsp;Each language is divided into 3 days, since the author doesn't expect you to spend all of your time on this. &nbsp;But most of the days were pretty short. &nbsp;The 3rd day generally took a few hours of work, but it still didn't amount to much. &nbsp;It also seems like there was an expectation that you would read the day's chapter and then look up more information online. &nbsp;I did look things up while doing the exercises, but it's hard to just browse the internet for language resources when you don't really have something to work on. &nbsp;The end result was that I kind of rushed through the chapters and probably didn't let as much of the language absorb as I could have.</p>
<p>I was very glad to get these introductions to some very different languages. &nbsp;I think I found a few languages that I really want to use some more. &nbsp;The languages that I'm not very interested in gave me some new perspectives on problems that I'll appreciate even without diving deeper into the languages.</p>
<p>The languages that I would actually use:</p>
<ul>
<li>Scala seems like a good transitional language to get into functional programming. &nbsp;It also deals with a lot of the problems with Java: &nbsp;a more expressive and flexible type system (including inferred types), support for closures, mixins, tuples, actors, and more. &nbsp;This was the language that was the most similar to Java, so it should be the easiest for me to get into.</li>
<li>Clojure was a lot of fun to program in. &nbsp;The prefix notation was an interesting change of pace. &nbsp;This was the functional language that I found the easiest to pick up.</li>
<li>Ruby has a lot of similarities to Groovy, which, besides Java, is the language I am most familiar with. &nbsp;It seems like it would be a very productive way to write applications. &nbsp;I think I would definitely need to look into Rails to get further into it.</li>
</ul>
<p>The languages I probably won't touch again:</p>
<ul>
<li>Io's prototype system started to make sense to me after the exercises. &nbsp;I think a lot of the lessons I learned will apply to JavaScript, which I don't have much knowledge of. &nbsp;However, the language seems very niche and I don't think it applies that well to general usage.</li>
<li>Prolog was weird. &nbsp;I can see how it would be really useful for logic problems, but I don't think it's something I'll find a use for. &nbsp;You have to think in a very different way to write programs in Prolog.</li>
<li>Erlang was interesting. &nbsp;It had similar syntax to Prolog but was a more normal programming language. &nbsp;However, a lot of basic stuff was really odd to write in Erlang, and it just wasn't much fun.</li>
<li>Haskell was something I had expected to like. &nbsp;I don't know if it was just the way it was presented in the book, but that language went way over my head. &nbsp;The type system didn't make much sense to me. &nbsp;Given how many of the exercises I skipped this is the language I only feel I got half of the benefit.</li>
</ul>
<p>&nbsp;Even if you don't buy this book, I do recommend looking into languages different than the ony you spend most of your time with. &nbsp;Seeing that different perspective can really help a lot even in your home language.</p>]]></description></item><item><title>7 Languages: Haskell</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Tue, 20 Mar 2012 02:22:47 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/19/7-languages-haskell.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b591</guid><description><![CDATA[<p>The final language of 7 Languages in 7 Weeks was <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a>, the only pure functional language in the book. &nbsp;This is the only chapter where I completely gave up on most of the exercises. &nbsp;More on that later...</p>
<p>Haskell as a functional language does a lot of the things I've seen in half the languages in the book. &nbsp;It has a list comprehension syntax almost identical to Erlang's, the common list manipulation functions like map, filter, and foldl, as well as pattern matching. &nbsp;Here's one example of a Haskell function:</p>
<pre>	allEven [] = []
	allEven (h:t) = if even h then h:allEven t else allEven t
</pre>
<p>One of the biggest differences with Haskell compared to the other functional languages in the book is its strong, static type system. &nbsp;Like Scala, a lot of the types are inferred from the context. &nbsp;The author really hyped it up, so I thought it would be pretty intuitive. &nbsp;Once I dug into the second set of exercises, however, I was baffled. &nbsp;I tried making a function for removing an item from a list:</p>
<pre>	listRemove :: [Integer] -&gt; Integer -&gt; [Integer]
	listRemove list x = foldl (\elem result -&gt; if x == elem then result else elem:result) [] list
</pre>
<p>Seemed like it should work to me. &nbsp;However when I compiled it, I got this:</p>
<pre>    Couldn't match expected type `[Integer]' with actual type `Integer'
    In the first argument of `listRemove', namely `min'
    In the first argument of `sort', namely `(listRemove min list)'
    In the second argument of `(:)', namely
      `(sort (listRemove min list))'
Failed, modules loaded: none.
</pre>
<p>While, at first glance, that appears to be a well described error, I can't for the life of me figure out why elem is being treated as a [Integer] rather than a Integer... &nbsp;And that right there is where I stopped doing the exercises.</p>
<p>Onle last feature of Haskell that I'll mention is that you can only declare functions with one argument. &nbsp;You can essentially create multi-argument functions, but they're actually "curried" to form the end result.</p>
<pre>-- function with two parameters (kind of)
product x y = x * y

-- calling product 3 4 is equivalent to
(product 3) 4
</pre>
<p>This happens because the function "product" doesn't take two arguments. &nbsp;The type declaration for this would be:</p>
<pre>double :: Integer -&gt; Integer -&gt; Integer
</pre>
<p>Which means product is a function that takes one Integer but returns a function that takes one more Integer which then returns an Integer. &nbsp;Pretty interesting concept.</p>
<p>There was another chapter on declaring types and monads which went almost completely over my head. &nbsp;It didn't help that I was alteady frustrated with Haskell and didn't really care how it worked anymore.</p>
<p>Haskell seems like it would teach me a lot about functional programming, but I don't have any intention of looking at it anytime soon. &nbsp;I'm sure it would be a lot easier to understand with a book tailored towards teaching the language rather than just getting a taste of what it has to offer.</p>
<p>I've got one more post coming to wrap up the 7 Languages book.</p>]]></description></item><item><title>7 Languages: Clojure</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Mon, 19 Mar 2012 00:26:53 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/18/7-languages-clojure.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b58f</guid><description><![CDATA[<p>Oooooo.... &nbsp;<a href="http://en.wikipedia.org/wiki/Clojure">Clojure</a>. &nbsp;Along with Scala, this was one of my most anticipated languages (mainly because of the JVM integration). &nbsp;Clojure is a dialect of Lisp, which is a very old family of programming languages. &nbsp;Most of the syntax is just parentheses.</p>
<p>For the <a href="http://xkcd.com/297/">xkcd</a> fans:</p>
<p><span class="full-image-block ssNonEditable"><span><img src="http://imgs.xkcd.com/comics/lisp_cycles.png?__SQUARESPACE_CACHEVERSION=1332117028106" alt="" /></span></span></p>
<p>I've wanted to try a Lisp for a while and Clojure seems like the most practical one. &nbsp;Clojure is another functional language, though it's not considered "pure" since it does allow some side-effects. &nbsp;As I said above, the syntax pretty much just parantheses grounping function calls.</p>
<p><pre>
; create a list of numbers
(list 1 2 3 4 5)

;define a value
(def stuff (list 1 2 3))

;prefix notation
(+ 1 2)

;map function that doubles each element in the list
(map #(* 2 %) stuff)
</pre></p>
<p>Beyond trying to mentally parse all of those parens, the prefix notation can get a little confusing. &nbsp;Instead of saying (1 + 2) you have to say (+ 1 2). &nbsp;In Io you passed a message to an object. In Clojure you pass arguments to a function. &nbsp;Even things like if statements have been turned into functions.</p>
<p><pre>
(if (= 3 (count stuff))
  (println "If is a function!")
  (println "That should have worked."))
</pre>
</p>
<p>Another cool thing about Lisps in general is that everything is essentially a list. &nbsp;The code is data and the data is code. &nbsp;You can write macros that allow you to create new language constructs:</p>
<p><pre>
(defmacro unless [test body else]
	(list 'if (list 'not test) body else))
</pre></p>
<p>Clojure also has a strong concurrency focus. &nbsp;While, as with most functional languages, you should try to stick with immutability, you can still use mutable state in a safe way. &nbsp;Clojure implements a thing they call Software Transactional Memory (STM), which is basically the equivalent of a database transaction for your application's objects in memory.&nbsp;</p>
<p>There's a lot of cool concurrency stuff in Clojure, but I don't understand it well enough to summarize it.</p>
<p>Clojure is really fascinating. &nbsp;It's a very different way of programming, but one that didn't crush my head into pulp like Prolog did. &nbsp;I'm looking forward to playing around with this language more in the future.</p>
<p>One final installment to come: Haskell.</p>]]></description></item><item><title>7 Languages: Erlang</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sun, 18 Mar 2012 18:37:24 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/18/7-languages-erlang.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b58d</guid><description><![CDATA[<p>Chapter 5 of 7 Languages in 7 Weeks is on <a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a>. &nbsp;Erlang is a functional language with a strong focus on concurrency and reliability. &nbsp;Its syntax is based on Prolog (i.e. it's weird). &nbsp;The author described it as a language that "makes easy things hard, and hard things easy".</p>
<p>As a functional language it has a lot of functions geared towards collection operations (e.g. map, foreach, foldl). &nbsp;Nothing terrible weird about those. &nbsp;It does have this cool feature they call list comprehensions, that are a way for you to combine most of those operations into one line:</p>
<p>&nbsp;</p>
<pre>//rough syntax
[map || iteration, filter, filter2, ...]

//example
[lists:foldl(fun(X, Product) -&gt; X * Product end, List) || List &lt;- Lists, length(List) &gt; 5]
</pre>
<p>&nbsp;</p>
<p>This will return a list that contains the product of all elements in each list with a length longer than 5.</p>
<p>But in general the syntax and general usage is the "making easy things hard" part of that quote. &nbsp;The "making hard things easy" part is related to concurrency and reliability.</p>
<p>Erlang also uses an actor based concurrency strategy, but rather than having them run in threads as they would in Scala, Erlang spawns lightweight processes. &nbsp;Those processes don't share any state, pushing developers even farther down the immutability only and functional programming route.</p>
<p>The reliability portion of that is that there are some core libraries that help manage the processes and restart them if they fail. &nbsp;Rather than burden the code with all kinds of error handling logic, Erlang's mantra is "let it crash". &nbsp;If the process fails you have something monitoring for that and it is immediately restarted.</p>
<p>Erlang seems well suited to a lot of things. &nbsp;Most of them aren't things I'm interested in developing. &nbsp;I'm glad to have learned a little about their perspective, but I'm not too broken up about moving on to the next language: Clojure.</p>]]></description></item><item><title>7 Languages: Scala</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Wed, 14 Mar 2012 03:00:15 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/13/7-languages-scala.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b58b</guid><description><![CDATA[<p>Just crossed the halfway point of 7 Languages in 7 Weeks with <a href="http://en.wikipedia.org/wiki/Scala_(programming_language)">Scala</a>. &nbsp;This is a hybrid object-oriented and functional language. &nbsp;It's a JVM based language, and provides interoperability with existing Java code. &nbsp;Like, Java it has strong static typing. &nbsp;Unlike Java, Scala can infer types in many cases, removing a lot of extra typing. &nbsp;For example in Java:</p>
<p>List&lt;String&gt; list = new ArrayList&lt;String&gt;();</p>
<p>And in Scala:</p>
<p>val list = List("string1", "string2")</p>
<p>Scala knows that since you created a list of two Strings, that you probably want that variable to be a List[String] variable. &nbsp;That line is about two-thirsda as long as the equivalent in Java, not to mention that I already added two items to the list in Scala, as opposed to the empty Java list.</p>
<p>Scala also supports closures, has native support for XML, really cool pattern matching stuff, and some fancy concurrency stuff that I don't really grasp.</p>
<p>Native support for tuples which can give you essentially multiple return values:</p>
<p><pre>
def getName() {
  (first, last)
}
val (first, last) = getName()
println(first)
println(last)
</pre></p>
<p>It also has an equivalent of multiple inheritance or mixins, that they call Traits. &nbsp;A trait is essentially an abstract class, but you can mix multiple traits into a single class. &nbsp;(This is just an illustration of the idea, not sure if the syntax is completely right)</p>
<p><pre>
trait Greeter {
  def greet() = println("Hello!")
}

trait Helper {
  def help() = println("Can I help you?")
}

class Person(name: String) with Greeter, Helper
</pre></p>
<p>Scala seems very complex. &nbsp;It's type system is really cool, but hard to wrap your head around. &nbsp;Case in point, this example method signature:</p>
<p><pre>
def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That
</pre></p>
<p>I'd really like to get into Scala some more (just ordered <a href="http://www.amazon.com/Programming-Scala-Comprehensive-Step---Step/dp/0981531644/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1331695083&amp;sr=1-1">Programming in Scala</a>, so I can do just that). &nbsp;It seems like a nice next step past Java. &nbsp;Giving some more modern constructs and simplifying some of the mundane ceremony in Java.</p>
<p>Next up Erlang...</p>]]></description></item><item><title>7 Languages: Prolog</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sun, 11 Mar 2012 02:37:55 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/10/7-languages-prolog.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b589</guid><description><![CDATA[<p>Next up in 7 Languages in 7 Weeks was <a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a>. &nbsp;This is a logic programming language. &nbsp;Your "code" defines facts and rules, and then executes queries on them. &nbsp;It's all declarative, you don't ever see the algorithm that Prolog uses. &nbsp;It's a very different way of thinking, since you are just describing the problem, and asking Prolog to solve it for you.</p>
<p>One of the challenges was to reverse a list in Prolog.</p>
<pre>list_reverse([], []).
list_reverse([X], [X]).
list_reverse([Head|Tail], Reversed) :-
    list_reverse(Tail, ReversedTail),
    append(ReversedTail, [Head], Reversed).
</pre>
<p>Here's some explanation of that:</p>
<ol>
<li>The reverse of an empty list is an empty list.</li>
<li>The reverse of a one item list of the same one item list.</li>
<li>The reverse of a two or more element list is the reversal of elements 2 through the end followed by the first element.</li>
</ol>
<p>&nbsp;</p>
<p>I had a hard time wrapping my head around this approach. &nbsp;The third set of exercises was solving Sudoku and the 8 Queens problem. &nbsp;The solution the author showed for a 4x4 solution was interesting, but it seemed way too tedious.</p>
<pre>valid([]).
valid([Head|Tail]) :-
   fd_all_different(Head),
   valid(Tail).
 
sudoku(Puzzle, Solution) :-
    Solution = Puzzle,
    Puzzle = [S11, S12, S13, S14,
              S21, S22, S23, S24,
              S31, S32, S33, S34,
              S41, S42, S43, S44],
    fd_domain(Solution, 1, 4),
    Row1 = [S11, S12, S13, S14],
    Row2 = [S21, S22, S23, S24],
    Row3 = [S31, S32, S33, S34],
    Row4 = [S41, S42, S43, S44],
    Column1 = [S11, S21, S31, S41],
    Column2 = [S12, S22, S32, S42],
    Column3 = [S13, S23, S33, S43],
    Column4 = [S14, S24, S34, S44],
    Square1 = [S11, S12, S21, S22],
    Square2 = [S13, S14, S23, S24],
    Square3 = [S31, S32, S41, S42],
    Square4 = [S33, S34, S43, S44],
    valid([Row1, Row2, Row3, Row4,
        Column1, Column2, Column3, Column4,
        Square1, Square2, Square3, Square4]).
</pre>
<p>The exercise was to expand that solution for 6x6 and 9x9. &nbsp;That would have either meant a lot of typing and no thinking or an extreme amount of&nbsp;thinking trying to generalize a solution. &nbsp;I just didn't grasp the though process required for Prolog enough to try that.</p>
<p>Prolog has some fascinating use cases. &nbsp;At the beginning of the chapter, the author interviewed someone who had writting a masters thesis on predicting the behavior of a trained dolphin, given the rules the dolphin was taught. Apparently, Prolog also has a lot of use in natural language processing, with the IBM Watson computer even being partially written in it.</p>
<p>The end result is that Prolog doesn't click for me. &nbsp;I would need a lot more time with it, than I want to spend. &nbsp;Especially considering I don't see any direct use cases for Prolog in the stuff I like to play around with.</p>
<p>Next up is Scala.</p>]]></description></item><item><title>7 Languages: Io</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Sat, 10 Mar 2012 20:14:20 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/10/7-languages-io.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b587</guid><description><![CDATA[<p>Chapter 2 of 7 Languages in 7 Weeks is on the <a href="http://en.wikipedia.org/wiki/Io_(programming_language)">Io programming language</a>. &nbsp;Io is a prototypical (like JavaScript) object oriented language. &nbsp;JavaScript usually gives me a bad taste in my mouth, because the prototype style just doesn't feel right. &nbsp;However, now that I have more experience with Io's prototyping, I can see the power. &nbsp;I wouldn't want to build an application with prototypes, but I see now that they have their place.</p>
<p>You create new objects by cloning other ones:</p>
<p>myObject &nbsp;:= Object clone</p>
<p>You can add properties (not the Io term for it) and methods to slots on the object:</p>
<p>myObject name := "Test"</p>
<p>myObject printName := method(name println)</p>
<p>Surprisingly the prototype system wasn't the interesting part of Io (at least for me). &nbsp;Io's syntax is as simple as it gets. &nbsp;All actions happen through message passing. &nbsp;For example a Hello World program looks like this:</p>
<p>"Hello World" println</p>
<p>Seems backwards at first, but what's happening is that "Hello World" is the object and println is the message being sent to it. Pretty much the only two other pieces of syntax are arguments on method calls (no argument methods can be called with parens):</p>
<p>myObject doStuff(arg1, arg2)</p>
<p>and operators (which are really just specially parsed messages:</p>
<p>myObject := Object clone</p>
<p>that parses to:</p>
<p>myObject :=(Object clone)</p>
<p>That's it. &nbsp;There are no keywords, there's no syntactic sugar, none of the stuff I usually expect to have to learn with a new language. What you end up with is just learning the libraries that are provided, which is a chore and a half. &nbsp;I haven't been able to find a good reference of the available methods. &nbsp;I ended having to resort to using the "slotNames" slot of the major prototypes to get any idea of what was available. &nbsp;All you get there is the names, so there's not always a clear indication of what it does or what kind of arguments it expects.</p>
<p>Dealing with the normal libraries would have been enough challenge, but the 3rd set of exercises focused on metaprogramming. &nbsp;You have a lot of power to change the way that Io works. &nbsp;You can create new operators, change the behavior of any method on any object. &nbsp;A couple of the examples were for creating new map and list syntaxes which was pretty cool.</p>
<p>Inside of a method you can get all kinds of information about the message that is being invoked. &nbsp;Unfortunately there isn't much documentation on how to access or use that information.</p>
<p>I learned far more from Io than I did from Ruby, but &nbsp;I don't see Io as a language I would write applications in. &nbsp;It has a lot to teach, especially if you come from a Java background. &nbsp;There's also some intriguing concurrency support, that the book gave only a passing discussion of.</p>
<p>Next up, Prolog!</p>]]></description></item><item><title>7 Languages: Ruby</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Fri, 09 Mar 2012 02:46:23 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/3/8/7-languages-ruby.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b585</guid><description><![CDATA[<p>I did end up buying <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages in Seven Weeks</a>. &nbsp;This book covers the following languages:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Ruby_(programming_language)">Ruby</a></li>
<li><a href="http://en.wikipedia.org/wiki/Io_(programming_language)">Io</a></li>
<li><a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a></li>
<li><a href="http://en.wikipedia.org/wiki/Scala_(programming_language)">Scala</a></li>
<li><a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a></li>
<li><a href="http://en.wikipedia.org/wiki/Clojure">Clojure</a></li>
<li><a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a></li>
</ul>
<p>This book isn't trying to teach the details of all 7 languages. &nbsp;The author admits that would be a foolish pursuit. &nbsp;Instead, each chapter is designed to give you a flavor for what makes the language unique. &nbsp;What I found most interesting is that the author (Bruce Tate) doesn't actually teach you how to do most of the exercises. &nbsp;He gives some examples that give you a taste, but trusts that you are smart enough to use Google to find some reference material. &nbsp;</p>
<p>I just finished the Ruby section, so here's my take on the language. &nbsp;I won't bother describing what Ruby is for two reasons: &nbsp;it's insanely popular right now (Ruby on Rails) and that's what <a href="http://en.wikipedia.org/wiki/Ruby_(programming_language)">Wikipedia's</a> for.</p>
<p>The biggest thing that struck me as I learned some of the features of Ruby, was how similar it is to Groovy. &nbsp;Groovy is an extension of Java that provides a lot (I mean a lot) of the features Ruby does. &nbsp;Groovy isn't as pure as Ruby, given it's deep tie into Java, but it helped me pick up a lot of the concepts very quickly.</p>
<p>Some key features:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Duck_typing">duck typing</a> - No need to check types. &nbsp;As long as the (If it has a swim method like a Duck, has a quack method like a Duck, might as well treat it like a Duck)</li>
<li><a href="http://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a> - Can change the way a class behaves (add new methods, override existing methods, etc) at runtime. &nbsp;Groovy has this with the metaclass.</li>
<li>blocks (i.e. closures) - Functions are objects. &nbsp;They can be passed as arguments to other functions/methods.</li>
</ul>
<p>Ruby as a language seems pretty interesting. &nbsp;Tate talked about how Ruby is great for rapid development. &nbsp;One of the reasons I've been wary about Ruby before is the performance. &nbsp;However, Tate points out that worrying about performance before you even having anything is pointless pre-optimization. &nbsp;Better to develop something quickly that might perform poorly, if you get a significant user base, than never finish something on pure Java because there's so much extra code to write. &nbsp;Though since I can do most of the same stuff in Groovy, and I'm already familiar with it, I'm not sure how likely it is I'll use Ruby for anything. &nbsp;</p>
<p>JRuby (an implementation of Ruby for the JVM) is also interesting to me. &nbsp;I've never used Ruby's gem system from a programming standpoint, but I have tried to install ruby apps before. &nbsp;When I tried installing <a href="http://gitorious.org/">Gitorius</a>&nbsp;there were so many ruby dependencies to deal with installing, that I never got it to work. &nbsp;It just wasn't worth the time. &nbsp;I'm hoping that JRuby has a nicer way of managing its gem equivalents.</p>
<p>&nbsp;</p>]]></description></item><item><title>Relearning PHP</title><category>Development</category><dc:creator>Andrew Oberstar</dc:creator><pubDate>Wed, 29 Feb 2012 00:56:51 +0000</pubDate><link>http://www.andrewoberstar.com/blog/2012/2/28/relearning-php.html</link><guid isPermaLink="false">5005ed49e4b0d534734f5630:5005f070e4b0ee36c463b555:5005f070e4b0ee36c463b583</guid><description><![CDATA[<p>Very little of my programming life has been outside of the JVM world. &nbsp;Java was the primary language at my college, and is the primary language at my workplace. &nbsp;Recently, I've gotten into Groovy, which is a dynamic language for the JVM. &nbsp;I dabbled a small amount in C++ and PHP, but didn't stick with them.</p>
<p>I recently began collaborating with a friend on a website, so I've been trying to relearn PHP which is our common denominator. &nbsp;I read through most of the manual on php.net, but needed something that gave a little more guidance. &nbsp;I ended up reading <a href="http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_2?ie=UTF8&amp;qid=1330477190&amp;sr=8-2">PHP Objects, Patterns and Practice</a>&nbsp;which did a good job of showing how to apply design patterns in PHP. &nbsp;I would very much recommend this book if you want to get beyond a understanding of PHP syntax.</p>
<p>In general, I have a bad view of PHP as an Object Oriented language. &nbsp;This mainly stems from its beginnings as a simple scripting language and having objects tacked on once people started using it for more complex use cases. &nbsp;PHP's OO capabilities just doesn't seem mature to me. &nbsp;I've only been developing in PHP for about a week (with not a whole lot of code generated), but I loath it. &nbsp;I'm sure a large factor is my background in Java, which makes many aspects of PHP sit funny with me.</p>
<ul>
<li>Dynamic typing: 
<ul>
<li>Groovy has dynamic types too but, in practice, I usually specify my types. &nbsp;It is a rare case for me where I want the flexibility of a dynamic type at the cost of the clarity a specified type provides. &nbsp;You can't really program to an interface when you could theoretically return anything from any method.</li>
<li>Not being able to specify the return types of methods makes it very hard for me to understand what's going on at a glance.</li>
</ul>
</li>
<li>Automatic conversions based on context: 
<ul>
<li>Again something that Groovy does, but I have a better grasp of the semantics with Groovy. &nbsp;Chalk that up to lack of experience with PHP.</li>
</ul>
</li>
<li>Lacking per-application module use (at least from my understanding): 
<ul>
<li>In JVM languages you add a JAR to your classpath in order to use a module/library. &nbsp;This gives you a lot of flexibility in per-application dependency management and portability.</li>
<li>PHP seems to require that you install modules in a per-installation extensions directory. &nbsp;At least for me, this causes a lot of config issues when moving between servers.</li>
</ul>
</li>
<li>Clumsy file/module/class inclusion: 
<ul>
<li>Yet another Java bias... &nbsp;I like the fact that Java gives me automatic access to any class that is present on the classpath. &nbsp;I don't want to use a require directive to specify the specific file I should load from.</li>
<li>I could write an autoloading block, but why should I have to do that when I feel the interpreter could handle that for me if given a classpath-like input.</li>
</ul>
</li>
</ul>
<p>I do still want to expand my language horizons, though I don't plan on PHP being anything more than a short-term part of that. &nbsp;I'm considering picking up&nbsp;<a href="http://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X">7 Languages in 7 Weeks</a> in the next few months. &nbsp;The goal of this book is to give you an intro-level flavor of seven languages: Ruby, Io, Prolog, Scala, Erlang, Clojure, Haskell. &nbsp;That seems like it would be a good starting point on finding a new language to make a deeper dive into.</p>]]></description></item></channel></rss>